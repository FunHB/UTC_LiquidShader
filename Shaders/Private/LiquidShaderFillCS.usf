/** Copyright 2023, Universal Tool Compiler */

#include "/Engine/Public/Platform.ush"

/** Params*/
uint RTargetSize;
float Pi;

/** Textures*/
Texture2D<float4> RefTexture;
RWTexture2D<float4> OutputTexture;

bool CheckHittedNormal(float3 NormalDirection)
{
    float3 PixelDirection = float3(1, 0, 0);
    float HitAngle = acos(dot(NormalDirection, PixelDirection) / (length(NormalDirection) * length(PixelDirection)));
	
    if (HitAngle < (Pi / 2))
        return false;

    return true;
}

bool CheckIfHitNormal(uint2 ThreadId)
{
    if (RefTexture[ThreadId].x != 0 || RefTexture[ThreadId].y != 0 || RefTexture[ThreadId].z != 0)
        return true;
	
    return false;
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID)
{	
    if (CheckIfHitNormal(ThreadId.xy))
    {
        OutputTexture[ThreadId.xy] = float4(1, 1, 1, 1);
		
        if (CheckHittedNormal(RefTexture[ThreadId.xy].xyz) && !CheckIfHitNormal(uint2(ThreadId.x + 1, ThreadId.y)))
        {
            uint2 PixelTemp[2048];
            for (int i = 1; i < RTargetSize - ThreadId.x; i++)
            {
                uint2 PixelPosition = uint2(ThreadId.x + i, ThreadId.y);

                PixelTemp[i - 1] = PixelPosition;
                if (i == RTargetSize - ThreadId.x - 1)
                {
                    for (int j = 0; j <= i - 1; j++)
                    {
                        OutputTexture[PixelTemp[j]] = float4(0, 0, 0, 0);
                    }
                    break;
                }
					
                if (CheckIfHitNormal(PixelPosition))
                    break;
				
                OutputTexture[PixelPosition] = float4(1, 1, 1, 1);
            }
        }
    }
}